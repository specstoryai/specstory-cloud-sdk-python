#!/usr/bin/env python3
"""Generate Python types from OpenAPI specification"""

import json
import subprocess
import sys
from pathlib import Path

# Paths
SCRIPT_DIR = Path(__file__).parent
ROOT_DIR = SCRIPT_DIR.parent.parent
OPENAPI_PATH = ROOT_DIR / "openapi.json"
OUTPUT_PATH = SCRIPT_DIR.parent / "specstory" / "types_generated.py"


def generate_types():
    """Generate Python types using datamodel-code-generator"""
    print("üìù Generating Python types from OpenAPI spec...")
    
    if not OPENAPI_PATH.exists():
        print(f"‚ùå OpenAPI spec not found at {OPENAPI_PATH}")
        sys.exit(1)
    
    # Generate types using datamodel-code-generator
    cmd = [
        "datamodel-codegen",
        "--input", str(OPENAPI_PATH),
        "--output", str(OUTPUT_PATH),
        "--target-python-version", "3.8",
        "--use-union-operator",  # Use | instead of Union
        "--field-constraints",    # Add field constraints
        "--use-default",         # Use default values
        "--reuse-model",         # Reuse models
        "--enum-field-as-literal", "all",  # Use literals for enums
        "--input-file-type", "openapi",
        "--output-model-type", "pydantic_v2.BaseModel",  # Use Pydantic v2
        "--use-standard-collections",  # Use list/dict instead of List/Dict
        "--collapse-root-models",  # Simplify root models
        "--use-schema-description",  # Include descriptions
        "--field-extra-keys", "description",  # Add descriptions to fields
        "--disable-timestamp",  # Don't add timestamp
    ]
    
    try:
        subprocess.run(cmd, check=True)
        print("‚úÖ Raw types generated successfully!")
        
        # Post-process the generated file
        post_process_types()
        
        print(f"üìÅ Output: {OUTPUT_PATH}")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to generate types: {e}")
        sys.exit(1)
    except FileNotFoundError:
        print("‚ùå datamodel-code-generator not found. Install it with:")
        print("   pip install datamodel-code-generator")
        sys.exit(1)


def post_process_types():
    """Post-process generated types for better ergonomics"""
    with open(OUTPUT_PATH, "r") as f:
        content = f.read()
    
    # Add header
    header = '''"""
Auto-generated types from OpenAPI specification.
Do not edit this file directly.
"""

# ruff: noqa
# type: ignore[misc]

'''
    
    # Clean up the content
    content = header + content
    
    # Replace BaseModel with TypedDict for lighter weight types where appropriate
    # (This is a simplified example - in practice you'd want more sophisticated logic)
    content = content.replace("from pydantic import", "from typing import Any, Optional\nfrom pydantic import")
    
    # Write back
    with open(OUTPUT_PATH, "w") as f:
        f.write(content)
    
    print("‚úÖ Post-processing complete!")


if __name__ == "__main__":
    generate_types()