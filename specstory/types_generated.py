"""
Auto-generated types from OpenAPI specification.
Do not edit this file directly.
"""

# ruff: noqa

# generated by datamodel-codegen:
#   filename:  openapi.json

from __future__ import annotations

from typing import Any
from uuid import UUID

from typing import Any, Optional
from pydantic import AwareDatetime, BaseModel, Field


class ErrorResponse(BaseModel):
    success: bool = Field(..., examples=[False])
    error: str = Field(..., examples=['Invalid API key'])


class Project(BaseModel):
    id: UUID
    ownerId: str
    name: str
    icon: str | None = None
    color: str | None = None
    createdAt: AwareDatetime
    updatedAt: AwareDatetime


class Data(BaseModel):
    projects: list[Project]
    total: int


class ListProjectsResponse(BaseModel):
    success: bool
    data: Data


class UpdateProjectRequest(BaseModel):
    name: str | None = None
    icon: str | None = None
    color: str | None = None


Data1 = UpdateProjectRequest


class UpdateProjectResponse(BaseModel):
    success: bool
    data: Data1


class Data2(BaseModel):
    deletedProject: Project
    deletedAt: AwareDatetime


class DeleteProjectResponse(BaseModel):
    success: bool
    data: Data2


class SessionMetadata(BaseModel):
    clientName: str | None = None
    clientVersion: str | None = None
    agentName: str | None = None
    deviceId: str | None = None
    gitBranches: list[str] | None = None
    llmModels: list[str] | None = None
    tags: list[str] | None = None


class SessionSummary(BaseModel):
    id: UUID
    projectId: str
    name: str
    markdownSize: int
    rawDataSize: int
    metadata: SessionMetadata
    createdAt: AwareDatetime
    updatedAt: AwareDatetime
    startedAt: AwareDatetime | None = None
    endedAt: AwareDatetime | None = None
    etag: str | None = None


class SessionDetail(BaseModel):
    id: UUID
    projectId: str
    name: str
    markdownContent: str
    markdownSize: int
    rawDataSize: int
    metadata: SessionMetadata
    createdAt: AwareDatetime
    updatedAt: AwareDatetime
    startedAt: AwareDatetime | None = None
    endedAt: AwareDatetime | None = None


class Data3(BaseModel):
    sessions: list[SessionSummary]
    total: int
    projectId: str


class ListSessionsResponse(BaseModel):
    success: bool
    data: Data3


class WriteSessionRequest(BaseModel):
    projectName: str = Field(..., min_length=1)
    markdown: str = Field(..., min_length=1)
    rawData: str = Field(..., min_length=1)
    name: str = Field(..., min_length=1)
    metadata: SessionMetadata | None = None


class Data4(BaseModel):
    sessionId: str
    projectId: str
    createdAt: AwareDatetime


class WriteSessionResponse(BaseModel):
    success: bool
    data: Data4


class Data5(BaseModel):
    session: SessionDetail


class SessionDetailResponse(BaseModel):
    success: bool
    data: Data5


class DeleteSessionResponse(BaseModel):
    success: bool


class GraphQLRequest(BaseModel):
    query: str
    variables: dict[str, Any] | None = None
    operationName: str | None = None


class GraphQLResponse(BaseModel):
    data: dict[str, Any] | None = None
    errors: list[dict[str, Any]] | None = None
